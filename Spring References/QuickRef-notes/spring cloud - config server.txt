//**************************COMMON POM FOR ANY SPRING CLOUD******************
<parent> 
   <groupId>org.springframework.boot</groupId> 
   <artifactId>spring-boot-starter-parent</artifactId> 
   <version>2.0.2.RELEASE</version> 
   <relativePath/> <!-- lookup parent from repository --> 
</parent> 
 
<properties> 
   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> 
   <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> 
   <java.version>1.8</java.version> 
   <spring-cloud.version>Finchley.BUILD-SNAPSHOT</spring-cloud.version> 
</properties> 
 
<dependencyManagement> 
   <dependencies> 
         <dependency> 
               <groupId>org.springframework.cloud</groupId> 
               <artifactId>spring-cloud-dependencies</artifactId> 
               <version>${spring-cloud.version}</version> 
               <type>pom</type> 
               <scope>import</scope> 
         </dependency> 
   </dependencies> 
</dependencyManagement> 



//**********************PROPERTIES NEEDED TO SET IN CONFIG SERVER*****************************
server.port=8888 
spring.application.name=cloud-config 
  
spring.cloud.config.server.git.uri=file:///${user.home}/app-config-repo 

Can secure git repo by,
	spring.cloud.config.server.git.username = vinod
	spring.cloud.config.server.git.password = vinod
can get a force pull when local repo gets dirty
	spring.cloud.config.server.git.force-pull = true



//***********************PROPERTIES NEEDED IN CONFIG CLIENTS*************************************
spring.application.name=config-client 
spring.profiles.active=dev 
spring.cloud.config.uri=http://localhost:8888 
spring.cloud.config.username=root 
spring.cloud.config.password=s3cr3t 

Use @Value to acces configs
example - @Value("${user.role}") 



//*****************************GETTING PROPERITE OF APPLICATIONS USING CONFIG SERVER*************
FOLLOWING END POINTS AVAILABLE
	/{application}/{profile}[/{label}] 
	/{application}-{profile}.yml 
	/{label}/{application}-{profile}.yml 
	/{application}-{profile}.properties 
	/{label}/{application}-{profile}.properties 

HERE,
	•The {application} variable maps to the spring.application.name property's value on the client side
	•The {profile} variable maps to spring.profiles.active property's value on the client side
	•The {label} refers to a Git branch name, commit ID, and tag
		If the branch contains / use _ instead to resolve url ambiguity

EXAMPLE,
	http://localhost:8888/cloudconfig/dev/master
	http://localhost:8888/cloudconfig-dev.yml